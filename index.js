const headers = new Headers({
    "Content-Type": "application/json",
    "x-api-key": "live_tiIvDj23hbegwt66kRYC1MzhXvALN3leNop6lV6DibMhWhKKSiuo4g7cVJ3toJdd"
});

const requestOptions = {
    method: 'GET',
    headers: headers,
    redirect: 'follow'
};

const catGrid = document.getElementById("cat"); // –ø–æ–ª—É—á—á–∞–µ–º —Å—Å—ã–ª–∫—É –ø–æ –∞–π–¥–∏—à–Ω–∏–∫—É 
const pagination = document.querySelector('.pagination-container'); // –Ω–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ —Å –∫–ª–∞—Å—Å–æ–º .pagination-container
const indices = Array.from(document.querySelectorAll('.page-index')); // –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏–Ω–¥–µ–∫—Å–æ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ –º–∞—Å—Å–∏–≤ 
let currentPage = 1; // —Å –ø–æ–º–æ—â—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–¥–∞–µ–º –Ω–∞—á–∞–ª–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
function initPagination() { // —Å–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    indices.forEach((index, i) => { // –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –º–∞—Å—Å–∏–≤—É –∫–Ω–æ–ø–æ–∫, indices - –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        index.addEventListener('click', () => handlePaginationClick(index, i)); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç handlePaginationClick
    });
    indices[0].classList.add('active'); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏ (–∏–Ω–¥–µ–∫—Å 0) –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Ç—ë–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ active.
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
function handlePaginationClick(index, pageNumber) { // –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ - —Ç–µ–∫—É—â–∞—è –∫–Ω–æ–ø–∫–∞, –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
    indices.forEach(idx => idx.classList.remove('active')); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, —É–¥–∞–ª—è—è –∫–ª–∞—Å—Å active —É –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏.
    index.classList.add('active'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å —á—Ç–æ –±—ã –≤—ã–¥–µ–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    pagination.className = 'pagination-container'; // –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∫–ª–∞—Å—Å—ã —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å 'pagination-container'
    void pagination.offsetWidth; // –í—ã–∑—ã–≤–∞–µ—Ç —Ä–µ—Ñ–ª–æ—É (–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç —Å—Ç–∏–ª–µ–π), —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ CSS
    pagination.classList.add('open', `i${pageNumber + 1}`);
    
    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    if (currentPage > pageNumber) { // –£—Å–ª–æ–≤–∏–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (currentPage) –±–æ–ª—å—à–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination.classList.add('flip'); // –î–µ–π—Å—Ç–≤–∏–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç CSS-–∫–ª–∞—Å—Å flip —ç–ª–µ–º–µ–Ω—Ç—É pagination
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    currentPage = pageNumber;
    fetchCats(pageNumber);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å API
async function fetchCats(page = 0) {
    try {
        const response = await fetch(
            `https://api.thecatapi.com/v1/images/search?page=${page}&limit=10&order=ASC`, 
            requestOptions
        );
        const cats = await response.json();
        displayCats(cats);
        pagination.style.display = 'block';
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
        catGrid.innerHTML = "<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ç–∏–∫–æ–≤ üòø</p>";
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–æ–≤
function displayCats(cats) {
    const favorites = JSON.parse(localStorage.getItem('lovepics')) || [];
    
    catGrid.innerHTML = cats.map(cat => `
        <div class="cat-item" data-cat-id="${cat.id}">
            <img src="${cat.url}" class="cat-img" alt="–ö–æ—Ç–∏–∫ ${cat.id}">
            <button class="like-btn" onclick="toggleLike('${cat.id}', '${cat.url}')">
                <svg class="heart-icon ${favorites.some(f => f.id === cat.id) ? 'liked' : ''}" 
                     viewBox="0 0 24 24">
                    <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                </svg>
            </button>
        </div>
    `).join('');
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º
function toggleLike(id, url) {
    let favorites = JSON.parse(localStorage.getItem('lovepics')) || [];
    const index = favorites.findIndex(cat => cat.id === id);
    const isFavoriteView = document.querySelector('.menu-item:last-child').classList.contains('active');

    if (index === -1) {
        favorites.push({ id, url });
        showNotification('‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');
    } else {
        favorites.splice(index, 1);
        showNotification('üíî –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
        
        // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ - —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        if (isFavoriteView) {
            const catElement = document.querySelector(`[data-cat-id="${id}"]`);
            if (catElement) {
                catElement.style.transform = 'scale(0)';
                setTimeout(() => {
                    catElement.remove();
                    // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if (!document.querySelector('.cat-item')) {
                        catGrid.innerHTML = '<p class="empty-message">–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ç–∏–∫–æ–≤</p>';
                    }
                }, 300);
            }
        }
    }
    
    localStorage.setItem('lovepics', JSON.stringify(favorites));
    updateLikeState(id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    if (isFavoriteView && index !== -1) {
        showFavorites();
    }
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∞–π–∫–∞
function updateLikeState(catId) {
    const catItem = document.querySelector(`[data-cat-id="${catId}"]`);
    if (catItem) {
        const heartIcon = catItem.querySelector('.heart-icon');
        const isLiked = JSON.parse(localStorage.getItem('lovepics'))
            .some(f => f.id === catId);
            
        heartIcon.classList.toggle('liked', isLiked);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
function showFavorites() {
    const favorites = JSON.parse(localStorage.getItem('lovepics')) || [];
    pagination.style.display = 'none';
    
    if (favorites.length > 0) {
        catGrid.innerHTML = favorites.map(cat => `
            <div class="cat-item">
                <img src="${cat.url}" class="cat-img" alt="–ò–∑–±—Ä–∞–Ω–Ω—ã–π –∫–æ—Ç–∏–∫">
                <button class="like-btn" onclick="toggleLike('${cat.id}')">
                    <svg class="heart-icon liked" viewBox="0 0 24 24">
                        <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                    </svg>
                </button>
            </div>
        `).join('');
    } else {
        catGrid.innerHTML = '<p class="empty-message">–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ—Ç–∏–∫–æ–≤</p>';
    }
}

// –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 2000);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é
function setActive(element) {
    document.querySelectorAll('.menu-item').forEach(item => 
        item.classList.remove('active'));
    element.classList.add('active');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    initPagination();
    fetchCats();
});